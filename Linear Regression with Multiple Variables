# Multiple Linear Regression | Vectorization (NumPy; np.dot(w,x))\
# Review the features of NumPy and Python 

# Useful References:
# https://numpy.org/doc/stable/user/absolute_beginners.html,
#	https://numpy.org/doc/stable/user/basics.broadcasting.html)
# https://numpy.org/doc/stable/reference/arrays.indexing.html


"""

Vectors are ordered arrays of numbers. In notation, vectors are denoted with lower case bold letters such as ùê±.
The elements of a vector are all the same type. A vector does not, for example, contain both characters and numbers. The number of elements in the 
array is often referred to as the dimension though mathematicians may prefer rank. The vector shown has a dimension of ùëõ. The elements of a vector
can be referenced with an index. In math settings, indexes typically run from 1 to n. In computer science and these labs, indexing will typically run
from 0 to n-1. In notation, elements of a vector, when referenced individually will indicate the index in a subscript, for example, the 0ùë°‚Ñé element, 
of the vector ùê± is ùë•0. Note, the x is not bold in this case.

NumPy's basic data structure is an indexable, n-dimensional array containing elements of the same type (dtype).
Right away, you may notice we have overloaded the term 'dimension'. Above, it was the number of elements in the
vector, here, dimension refers to the number of indexes of an array. A one-dimensional or 1-D array has one index.
we will represent vectors as NumPy 1-D arrays.

- 1-D array, shape (n,): n elements indexed [0] through [n-1]

"""

import numpy as np    # it is an unofficial standard to use np for numpy
import time

"""
Data creation routines in NumPy will generally have a first parameter which is the shape of the object.
This can either be a single value for a 1-D result or a tuple (n,m,...) specifying the shape of the result. 
Below are examples of creating vectors using these routines.
"""
# NumPy routines which allocate memory and fill arrays with value

a = np.zeros(4);                print(f"np.zeros(4) :   a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.zeros((4,));             print(f"np.zeros(4,) :  a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.random.random_sample(4); print(f"np.random.random_sample(4): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")

# Some data creation routines do not take a shape tuple


# NumPy routines which allocate memory and fill arrays with value but do not accept shape as input argument

a = np.arange(4.);              print(f"np.arange(4.):     a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.random.rand(4);          print(f"np.random.rand(4): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")

# values can be specified manually as well


# NumPy routines which allocate memory and fill with user specified values

a = np.array([5,4,3,2]);  print(f"np.array([5,4,3,2]):  a = {a},     a shape = {a.shape}, a data type = {a.dtype}")
a = np.array([5.,4,3,2]); print(f"np.array([5.,4,3,2]): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")

"""
np.array([5,4,3,2]):  a = [5 4 3 2],     a shape = (4,), a data type = int64
np.array([5.,4,3,2]): a = [5. 4. 3. 2.], a shape = (4,), a data type = float64
"""
# These have all created a one-dimensional vector a with four elements. a.shape returns the dimensions.
# Here we see a.shape = (4,) indicating a 1-d array with 4 elements.



"""
INDEXING,
Elements of vectors can be accessed via indexing and slicing. NumPy provides a very complete set of indexing and slicing capabilities.
We will explore only the basics needed for the course here. Reference Slicing and Indexing for more details. Indexing means referring 
to an element of an array by its position within the array. Slicing means getting a subset of elements from an array based on their
indices. NumPy starts indexing at zero so the 3rd element of an vector ùêö is a[2].
"""

#vector indexing operations on 1-D vectors

a = np.arange(10)
print(a)

#access an element

print(f"a[2].shape: {a[2].shape} a[2]  = {a[2]}, Accessing an element returns a scalar")

# access the last element, negative indexes count from the end

print(f"a[-1] = {a[-1]}")

#indexs must be within the range of the vector or they will produce and error

try:
    c = a[10]
except Exception as e:
    print("The error message you'll see is:")
    print(e)

"""
OUTPUT:
[0 1 2 3 4 5 6 7 8 9]
a[2].shape: () a[2]  = 2, Accessing an element returns a scalar
a[-1] = 9
The error message you'll see is:
index 10 is out of bounds for axis 0 with size 10
"""


# Slicing creates an array of indices using a set of three values (start:stop:step).
# A subset of values is also valid. Its use is best explained by example:

#vector slicing operations

a = np.arange(10)
print(f"a         = {a}")

# access 5 consecutive elements (start:stop:step)

c = a[2:7:1];     print("a[2:7:1] = ", c)

# access 3 elements separated by two 

c = a[2:7:2];     print("a[2:7:2] = ", c)

# access all elements index 3 and above

c = a[3:];        print("a[3:]    = ", c)

# access all elements below index 3

c = a[:3];        print("a[:3]    = ", c)

# access all elements

c = a[:];         print("a[:]     = ", c)

"""
OUTPUT:
a         = [0 1 2 3 4 5 6 7 8 9]
a[2:7:1] =  [2 3 4 5 6]
a[2:7:2] =  [2 4 6]
a[3:]    =  [3 4 5 6 7 8 9]
a[:3]    =  [0 1 2]
a[:]     =  [0 1 2 3 4 5 6 7 8 9]
"""


# SINGLE VECTOR OPERATIONS, There are a number of useful operations that involve operations on a single vector.

a = np.array([1,2,3,4])
print(f"a             : {a}")
# negate elements of a

b = -a 
print(f"b = -a        : {b}")

# sum all elements of a, returns a scalar
b = np.sum(a) 
print(f"b = np.sum(a) : {b}")

b = np.mean(a)
print(f"b = np.mean(a): {b}")

b = a**2
print(f"b = a**2      : {b}")

"""
OUTPUT:
a             : [1 2 3 4]
b = -a        : [-1 -2 -3 -4]
b = np.sum(a) : 10
b = np.mean(a): 2.5
b = a**2      : [ 1  4  9 16]
***


# Vector Vector element-wise operations
# Most of the NumPy arithmetic, logical and comparison operations apply to vectors as well.
# These operators work on an element-by-element basis. For example: ùëêùëñ=ùëéùëñ+ùëèùëñ

a = np.array([ 1, 2, 3, 4])
b = np.array([-1,-2, 3, 4])
print(f"Binary operators work element wise: {a + b}")
# Binary operators work element wise: [0 0 6 8]

#try a mismatched vector operation
c = np.array([1, 2])
try:
    d = a + c
except Exception as e:
    print("The error message you'll see is:")
    print(e)
# The error message you'll see is:
# operands could not be broadcast together with shapes (4,) (2,) 


# Scalar Vector operations
# Vectors can be 'scaled' by scalar values. A scalar value is just a number.
# The scalar multiplies all the elements of the vector.

a = np.array([1, 2, 3, 4])

# multiply a by a scalar
b = 5 * a 
print(f"b = 5 * a : {b}")
# b = 5 * a : [ 5 10 15 20]


# Vector Vector dot product
"""
The dot product is a mainstay of Linear Algebra and NumPy. This is an operation used extensively in this course and should be well understood.

The dot product multiplies the values in two vectors element-wise and then sums the result. Vector dot product requires the dimensions of the two vectors to be the same.

Let's implement our own version of the dot product below:

Using a for loop, implement a function which returns the dot product of two vectors. 

																							 n-1
The function to return given inputs ùëé and ùëè: ùë• = ‚àë (ùëéùëñùëèùëñ)
																							 i=0

Assume both a and b are the same shape.
"""

def my_dot(a, b): 
    """
   Compute the dot product of two vectors
 
    Args:
      a (ndarray (n,)):  input vector 
      b (ndarray (n,)):  input vector with same dimension as a
    
    Returns:
      x (scalar): 
			
		Note, the dot product is expected to return a scalar value.
    """
    x=0
    for i in range(a.shape[0]):
        x = x + a[i] * b[i]
    return x

# test 1-D
a = np.array([1, 2, 3, 4])
b = np.array([-1, 4, 3, 2])
print(f"my_dot(a, b) = {my_dot(a, b)}")

#OUTPUT: my_dot(a, b) = 24


# Let's try the same operations using np.dot.

# test 1-D
a = np.array([1, 2, 3, 4])
b = np.array([-1, 4, 3, 2])
c = np.dot(a, b)
print(f"NumPy 1-D np.dot(a, b) = {c}, np.dot(a, b).shape = {c.shape} ") 
c = np.dot(b, a)
print(f"NumPy 1-D np.dot(b, a) = {c}, np.dot(a, b).shape = {c.shape} ")

# OUTPUT:
# NumPy 1-D np.dot(a, b) = 24, np.dot(a, b).shape = () 
# NumPy 1-D np.dot(b, a) = 24, np.dot(a, b).shape = () 
# note that the results for 1-D matched our implementation.
